// 스키마 등록 함수를 가져옵니다.
import { registerSchema, loginSchema, logoutSchema, refreshSchema, } from "../../schema";
import authService from "../../services/authService";
import { ERROR_MESSAGE, SUCCESS_MESSAGE } from "../../lib/constants";
import { handleError } from "../../lib/errorHelper";
const authRoute = async (fastify) => {
    fastify.post("/register", { schema: registerSchema }, async (req, rep) => {
        const { email, pwd } = req.body;
        try {
            await authService.register(email, pwd);
            rep
                .status(SUCCESS_MESSAGE.registerOk.status)
                .send(SUCCESS_MESSAGE.registerOk);
        }
        catch (error) {
            handleError(rep, ERROR_MESSAGE.badRequest, error);
        }
    });
    fastify.post("/login", { schema: loginSchema }, async (req, rep) => {
        const { email, pwd } = req.body;
        try {
            const values = await authService.loginWithPassword(email, pwd);
            rep.setCookie("refresh_token", values.refreshToken, {
                domain: "localhost",
                sameSite: "none",
                secure: true,
                path: "/",
                httpOnly: true,
                expires: new Date(Date.now() + 1000 * 60 * 60 * 24 * 7),
            });
            const result = {
                id: values.id,
                email: values.email,
                Authorization: values.accessToken,
            };
            rep.status(201).send(result);
        }
        catch (error) {
            handleError(rep, ERROR_MESSAGE.badRequest, error);
        }
    });
    fastify.delete("/logout", { schema: logoutSchema }, async (req, rep) => {
        const refresh_token = req.cookies.refresh_token;
        if (!refresh_token) {
            handleError(rep, ERROR_MESSAGE.unauthorized);
            return;
        }
        try {
            await authService.logout(refresh_token);
            rep.clearCookie("refresh_token", { path: "/" });
            rep
                .status(SUCCESS_MESSAGE.logoutOk.status)
                .send(SUCCESS_MESSAGE.logoutOk);
        }
        catch (error) {
            handleError(rep, ERROR_MESSAGE.badRequest, error);
        }
    });
    fastify.post("/refresh", { schema: refreshSchema }, async (req, rep) => {
        const refresh_token = req.cookies.refresh_token;
        if (!refresh_token) {
            handleError(rep, ERROR_MESSAGE.unauthorized);
            return;
        }
        try {
            const result = await authService.refresh(refresh_token);
            rep.status(201).send(result);
        }
        catch (error) {
            handleError(rep, ERROR_MESSAGE.badRequest, error);
        }
    });
};
export default authRoute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcm91dGVzL2F1dGgvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsb0JBQW9CO0FBQ3BCLE9BQU8sRUFDTCxjQUFjLEVBQ2QsV0FBVyxFQUNYLFlBQVksRUFDWixhQUFhLEdBQ2QsTUFBTSxjQUFjLENBQUM7QUFHdEIsT0FBTyxXQUFXLE1BQU0sNEJBQTRCLENBQUM7QUFDckQsT0FBTyxFQUFFLGFBQWEsRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFcEQsTUFBTSxTQUFTLEdBQUcsS0FBSyxFQUFFLE9BQXdCLEVBQUUsRUFBRTtJQUNuRCxPQUFPLENBQUMsSUFBSSxDQUNWLFdBQVcsRUFDWCxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsRUFDMUIsS0FBSyxFQUFFLEdBQXdDLEVBQUUsR0FBaUIsRUFBRSxFQUFFO1FBQ3BFLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQztRQUVoQyxJQUFJLENBQUM7WUFDSCxNQUFNLFdBQVcsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZDLEdBQUc7aUJBQ0EsTUFBTSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDO2lCQUN6QyxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3RDLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2YsV0FBVyxDQUFDLEdBQUcsRUFBRSxhQUFhLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3BELENBQUM7SUFDSCxDQUFDLENBQ0YsQ0FBQztJQUNGLE9BQU8sQ0FBQyxJQUFJLENBQ1YsUUFBUSxFQUNSLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxF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